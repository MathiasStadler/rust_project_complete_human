2031  cargo clean 
 2032  cargo build
 2033  cargo run
 2034  cargo flamegraph --bin
 2035  cargo flamegraph --bin hello
 2036  cargo build --release
 2037  cargo run --release
 2038  ls -la target/release/rust_project_complete_human
 2039  sh +x ./target/release/rust_project_complete_human
 2040  ./target/release/rust_project_complete_human
 2041  cargo flamegraph --bin rust_project_complete_human
 2042  CARGO_PROFILE_RELEASE_DEBUG=true cargo flamegraph --bin rust_project_complete_human

 CARGO_PROFILE_RELEASE_DEBUG=true cargo flamegraph --bin rust_project_complete_human
    Finished `release` profile [optimized + debuginfo] target(s) in 0.04s
Error: perf is not installed or not present in $PATH


##########
CARGO_PROFILE_RELEASE_DEBUG=true cargo flamegraph --bin rust_project_complete_human
    Finished `release` profile [optimized + debuginfo] target(s) in 0.05s
Error:
Access to performance monitoring and observability operations is limited.
Consider adjusting /proc/sys/kernel/perf_event_paranoid setting to open
access to performance monitoring and observability operations for processes
without CAP_PERFMON, CAP_SYS_PTRACE or CAP_SYS_ADMIN Linux capability.
More information can be found at 'Perf events and tool security' document:
https://www.kernel.org/doc/html/latest/admin-guide/perf-security.html
perf_event_paranoid setting is 3:
  -1: Allow use of (almost) all events by all users
      Ignore mlock limit after perf_event_mlock_kb without CAP_IPC_LOCK
>= 0: Disallow raw and ftrace function tracepoint access
>= 1: Disallow CPU event access
>= 2: Disallow kernel profiling
To make the adjusted perf_event_paranoid setting permanent preserve it
in /etc/sysctl.conf (e.g. kernel.perf_event_paranoid = <setting>)
failed to sample program, exited with code: Some(255)